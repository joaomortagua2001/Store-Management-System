@page "/account/gereroles"
@using Microsoft.AspNetCore.Identity
@using GestaoLojaV1.Data
@using Microsoft.EntityFrameworkCore
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Admin,Gestor")]

<h3>Gerir Roles</h3>

@if (!string.IsNullOrEmpty(feedbackMessage))
{
    <div class="alert alert-warning">@feedbackMessage</div>
}

<table class="table">
    <thead>
        <tr>
            <th>Nome de Usuário</th>
            <th>E-mail</th>
            <th>Role Atual</th>
            <th>Nova Role</th>
            <th>Ações</th>
        </tr>
    </thead>
    <tbody>
        @if (usersWithRoles != null)
        {
            foreach (var user in usersWithRoles)
            {
                <tr>
                    <td>@user.UserName</td>
                    <td>@user.Email</td>
                    <td>@string.Join(", ", user.Roles)</td>
                    <td>
                        @if (IsAdmin || (IsGestor && user.Roles.Count == 0))
                        {
                            <select class="form-select" @bind="user.NewRole">
                                <option value="">Selecione uma Role</option>
                                @if (IsAdmin)
                                {
                                    foreach (var role in availableRoles)
                                    {
                                        <option value="@role">@role</option>
                                    }
                                }
                                else if (IsGestor)
                                {
                                    <option value="Cliente">Cliente</option>
                                }
                            </select>
                        }
                        else
                        {
                            <span>Não tens permissão</span>
                        }
                    </td>
                    <td>
                        @if (IsAdmin || (IsGestor && user.Roles.Count == 0 && user.NewRole == "Cliente"))
                        {
                            <button class="btn btn-primary" @onclick="() => UpdateRole(user)">Atualizar Role</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" disabled>Atualizar Role</button>
                        }
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code {
    private List<UserWithRoles>? usersWithRoles;
    private List<string>? availableRoles;
    private bool IsAdmin;
    private bool IsGestor;
    private string? feedbackMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Obtém o estado do usuário atual
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Define as permissões do usuário atual
            IsAdmin = user.IsInRole("Admin");
            IsGestor = user.IsInRole("Gestor");

            // Carrega as roles disponíveis
            availableRoles = await RoleManager.Roles.Select(r => r.Name).ToListAsync();

            // Carrega os usuários com suas roles atuais
            usersWithRoles = await GetUsersWithRoles();
        }
        catch (Exception ex)
        {
            feedbackMessage = $"Erro ao inicializar: {ex.Message}";
        }
    }

    private async Task<List<UserWithRoles>> GetUsersWithRoles()
    {
        var result = new List<UserWithRoles>();

        using var context = DbContextFactory.CreateDbContext();
        var users = await context.Users.ToListAsync();

        foreach (var user in users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            result.Add(new UserWithRoles
                {
                    Id = user.Id,
                    UserName = user.UserName,
                    Email = user.Email,
                    Roles = roles.ToList()
                });
        }

        return result;
    }

    private async Task UpdateRole(UserWithRoles user)
    {
        try
        {
            // Verifica as permissões do usuário atual antes de atualizar a role
            if (IsGestor && (user.Roles.Count > 0 || user.NewRole != "Cliente"))
            {
                feedbackMessage = "Gestores só podem alterar roles de usuários sem roles e apenas para 'Cliente'.";
                return;
            }

            if (!string.IsNullOrEmpty(user.NewRole) && availableRoles.Contains(user.NewRole))
            {
                var dbUser = await UserManager.FindByIdAsync(user.Id);
                if (dbUser != null)
                {
                    var currentRoles = await UserManager.GetRolesAsync(dbUser);

                    // Remove as roles existentes e adiciona a nova role
                    await UserManager.RemoveFromRolesAsync(dbUser, currentRoles);
                    await UserManager.AddToRoleAsync(dbUser, user.NewRole);

                    usersWithRoles = await GetUsersWithRoles();
                    feedbackMessage = "Role atualizada com sucesso.";
                }
            }
        }
        catch (Exception ex)
        {
            feedbackMessage = $"Erro ao atualizar role: {ex.Message}";
        }
    }

    private class UserWithRoles
    {
        public string Id { get; set; } = string.Empty;
        public string UserName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public List<string> Roles { get; set; } = new();
        public string? NewRole { get; set; }
    }
}
