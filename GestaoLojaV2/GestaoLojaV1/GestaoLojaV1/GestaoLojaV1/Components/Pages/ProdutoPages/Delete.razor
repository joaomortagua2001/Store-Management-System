@page "/produtos/delete"

@attribute [Authorize(Roles = "Admin,Gestor")]

@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using GestaoLojaV1.Entities
@using GestaoLojaV1.Data
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Apagar Produto</PageTitle>

<h1>Apagar Produto</h1>

<h3>Tem a certeza de que quer apagar este produto?</h3>
<div>
    <h4>Produto</h4>
    <hr />
    @if (produto is null)
    {
        <p><em>Carregando...</em></p>
    }
    else
    {
        <dl class="row">
            <dd>
                <div>
                    @if (produto.Imagem is not null)
                    {
                        <img title="@produto.Nome" id="imagePreview" class="img-thumbnail  mt-2" src="data:image/*;base64,@(Convert.ToBase64String(produto.Imagem))" style="width:100px">
                    }
                    else
                    {
                        <img id="imagePreview" class="img-thumbnail mt-2" src="img/noproductstrans.png" style="width:100px;">
                    }
                </div>
            </dd>

            <dt class="col-sm-2">Nome</dt>
            <dd class="col-sm-10">@produto.Nome</dd>
        </dl>

        @if (isProductInVenda)
        {
            <p class="text-danger">Este produto foi vendido pelo menos uma vez portanto não pode ser apagado.</p>
            <a href="/produtos" class="btn btn-outline-secondary">Voltar</a>
        }
        else
        {
            <EditForm method="post" Model="produto" OnValidSubmit="DeleteProduto" FormName="delete" Enhance>
             <button type="submit" class="btn btn-danger" disabled="@(produto is null)" onclick="return confirm('Tem a certeza que deseja apagar este produto?')">
                 <img title="Apagar" src="/img/deleteicon.png" style="height:30px" />
             </button> |
             <a href="/produtos" type="button" class="btn btn-outline-secondary">
                 <img title="Recuar" src="/img/backicon.png" style="height:30px" />
             </a>
         </EditForm>
        }
    }
</div>

@code {
    Produto? produto;
    bool isProductInVenda = false;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        produto = await context.Produtos.FirstOrDefaultAsync(m => m.Id == Id);

        if (produto is null)
        {
            NavigationManager.NavigateTo("notfound");
        }

        // Verifica se o produto está associado a alguma venda
        isProductInVenda = await context.ProdutosVendidos.AnyAsync(pv => pv.ProdutoId == Id);
    }

    public async Task DeleteProduto()
    {
        if (isProductInVenda)
        {
            // Não permite exclusão se o produto estiver associado a vendas
            return;
        }

        using var context = DbFactory.CreateDbContext();
        context.Produtos.Remove(produto!);
        await context.SaveChangesAsync();

        await deleteImage(produto.Id, produto.UrlImagem);

        NavigationManager.NavigateTo("/produtos");
    }

    public async Task deleteImage(int id, string image)
    {
        string filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot/Produtos/" + id + "/" + image);

        try
        {
            System.IO.File.Delete(filePath);
        }
        catch (Exception ex)
        {
            // Log do erro ou tratamento adicional
        }
    }
}
